/*
 ==============================================================================

 This file was auto-generated by the Introjucer!

 It contains the basic framework code for a JUCE plugin processor.

 ==============================================================================
 */

#ifndef _RNBO_JUCEPLUGINPROCESSOR_H_
#define _RNBO_JUCEPLUGINPROCESSOR_H_

#include "JuceHeader.h"
#include "RNBO.h"
#include <unordered_map>

namespace RNBO {

	//holder class so we can construct the CoreObject before AudioProcessor
	class CoreObjectHolder {
	public:
		CoreObjectHolder(EventHandler* handler)
		: _rnboObject(handler)
		{}

		//==============================================================================
		RNBO::CoreObject& getRnboObject() { return _rnboObject; }
	protected:
		RNBO::CoreObject						_rnboObject;
	};

	//==============================================================================
	/**
	 */
	class JuceAudioProcessor  : public RNBO::EventHandler, public CoreObjectHolder, public AudioProcessor, public AsyncUpdater
	{
		using String = juce::String;
	public:
		//==============================================================================
		JuceAudioProcessor();
		~JuceAudioProcessor() override;

		//==============================================================================
		void prepareToPlay (double sampleRate, int samplesPerBlock) override;
		void releaseResources() override;

		static BusesProperties makeBusesPropertiesForRNBOObject(RNBO::CoreObject &object);

		bool isBusesLayoutSupported (const BusesLayout& layouts) const override;

		void processBlock (AudioSampleBuffer&, juce::MidiBuffer&) override;

		//==============================================================================
		AudioProcessorEditor* createEditor() override;
		bool hasEditor() const override;

		//==============================================================================
		const String getName() const override;

		bool acceptsMidi() const override;
		bool producesMidi() const override;
		bool isMidiEffect() const override;
		bool silenceInProducesSilenceOut() const override;
		double getTailLengthSeconds() const override;

		//==============================================================================
		int getNumPrograms() override;
		int getCurrentProgram() override;
		void setCurrentProgram (int index) override;
		const String getProgramName (int index) override;
		void changeProgramName (int index, const String& newName) override;

		//==============================================================================
		void getStateInformation (MemoryBlock& destData) override;
		void setStateInformation (const void* data, int sizeInBytes) override;

		//==============================================================================

		void handleAsyncUpdate() override;
		void eventsAvailable() override;

		void handleParameterEvent(const RNBO::ParameterEvent& event) override;
		void handleStartupEvent(const RNBO::StartupEvent& event) override;
		void handlePresetEvent(const RNBO::PresetEvent& event) override;

	private:

		class SyncEventHandler : public RNBO::EventHandler
		{
		public:
			SyncEventHandler(JuceAudioProcessor& owner)
			: _owner(owner)
			{}

			void eventsAvailable() override {}

			void handleParameterEvent(const RNBO::ParameterEvent& event) override;
			void handlePresetEvent(const RNBO::PresetEvent& event) override;

		private:
			bool				_isSettingPresetSync = false;
			JuceAudioProcessor& _owner;
		};

		//==============================================================================
		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (JuceAudioProcessor)

		RNBO::MidiEventList						_midiInput;
		RNBO::MidiEventList						_midiOutput;
		RNBO::PresetList						*_presetList;
		RNBO::DataRefList						*_datarefList;
		SyncEventHandler						_syncEventHandler;
		RNBO::ParameterEventInterfaceUniquePtr	_syncParamInterface;
		int										_currentPresetIdx;
		bool									_isInStartup = false;
		bool									_isSettingPresetAsync = false;
		//rnbo might have some invisible parameters that aren't given to juce, so we map the rnbo index to the juce index
		std::unordered_map<RNBO::ParameterIndex, int> _rnboParamIndexToJuceParamIndex;
	};


} // namespace RNBO

#endif  // #ifndef _RNBO_JUCEPLUGINPROCESSOR_H_
